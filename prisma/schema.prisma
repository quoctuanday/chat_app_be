generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String     @id @default(uuid())
  username   String     @unique
  email      String?    @unique
  password   String
  avatar_url String?
  status     UserStatus @default(offline)
  created_at DateTime   @default(now())

  // Quan hệ
  conversationsCreated Conversation[]       @relation("CreatedConversations")
  conversationMembers  ConversationMember[]
  messages             Message[]
  messageStatuses      MessageStatus[]

  friendships Friendship[] @relation("UserFriendships") // user_id
  friendsWith Friendship[] @relation("UserFriendsWith") // friend_id
}

enum UserStatus {
  online
  offline
  busy
}

model Conversation {
  conversation_id String           @id @default(uuid())
  type            ConversationType
  name            String?
  created_at      DateTime         @default(now())

  // user tạo cuộc trò chuyện
  created_by    User? @relation("CreatedConversations", fields: [created_by_id], references: [user_id])
  created_by_id String?

  members  ConversationMember[]
  messages Message[]
}

enum ConversationType {
  private
  group
}

model ConversationMember {
  conversation    Conversation @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id String
  user            User         @relation(fields: [user_id], references: [user_id])
  user_id         String
  role            MemberRole   @default(member)
  joined_at       DateTime     @default(now())

  @@id([conversation_id, user_id])
}

enum MemberRole {
  member
  admin
}

model Message {
  message_id      String       @id @default(uuid())
  conversation    Conversation @relation(fields: [conversation_id], references: [conversation_id])
  conversation_id String
  sender          User         @relation(fields: [sender_id], references: [user_id])
  sender_id       String
  content         String?
  message_type    MessageType  @default(text)
  created_at      DateTime     @default(now())

  statuses    MessageStatus[]
  attachments Attachment[]
}

enum MessageType {
  text
  image
  file
  system
}

model MessageStatus {
  message    Message  @relation(fields: [message_id], references: [message_id])
  message_id String
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    String
  status     Status   @default(sent)
  updated_at DateTime @default(now()) @updatedAt

  @@id([message_id, user_id])
}

enum Status {
  sent
  delivered
  read
}

model Friendship {
  user       User         @relation("UserFriendships", fields: [user_id], references: [user_id])
  user_id    String
  friend     User         @relation("UserFriendsWith", fields: [friend_id], references: [user_id])
  friend_id  String
  status     FriendStatus @default(pending)
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now()) @updatedAt

  @@id([user_id, friend_id])
}

enum FriendStatus {
  pending
  accepted
  blocked
}

model Attachment {
  attachment_id String    @id @default(uuid())
  message       Message   @relation(fields: [message_id], references: [message_id])
  message_id    String
  file_url      String
  file_type     FileType  @default(file)
  file_size     Int?
  uploaded_at   DateTime  @default(now())
}

enum FileType {
  image
  video
  file
  audio
}
